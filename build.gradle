import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.bmuschko.docker-remote-api' version "$dockerVersion" apply true
}

group = 'group.aist'
version = '1.0'

def ref = 'git rev-parse --short HEAD'.execute().text.trim();
version = "$projectVersion.$ref"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
	implementation 'com.sun.mail:jakarta.mail:2.0.1'

	implementation 'jakarta.activation:jakarta.activation-api:2.0.1'

//	configurations.all {
//		exclude group: 'javax.mail', module: 'mail'
//		exclude group: 'javax.activation', module: 'activation'
//	}

	implementation group: 'com.google.zxing', name: 'core', version: '3.3.1'




	implementation group: 'com.google.zxing', name: 'javase', version: '3.3.1'

	implementation 'com.itextpdf:itext7-core:7.1.17'




	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.28.0'

	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	implementation 'org.mapstruct:mapstruct-jdk8:1.5.2.Final'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.keycloak:keycloak-admin-client:21.1.2'

	implementation 'org.springframework.hateoas:spring-hateoas:2.3.1'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task dockerFile(type: Dockerfile, dependsOn: assemble) {
	destFile.set(project.file('Dockerfile'))
	from "alpine:$alpineVersion"
	runCommand 'apk add --no-cache openjdk17'
	runCommand 'apk add --no-cache tzdata'
	copyFile "build/libs/${project.name}-${project.version}.jar", '/app/'
	workingDir '/app/'
	entryPoint 'java'
	defaultCommand '-jar', "/app/${project.name}-${project.version}.jar"
}

task createDockerBuildDir {
	doLast {
		file('build/docker').mkdirs()
	}
}

task dockerBuild(type: DockerBuildImage, dependsOn: [dockerFile, createDockerBuildDir]) {
	inputDir.set(file('build/docker'))
	images.add("$dockerRepoUrl/${project.name}:$version")
}

task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
	images.add("$dockerRepoUrl/${project.name}:$version")

	registryCredentials {
		username = "$dockerHubUsername"
		password = "$dockerHubPassword"
		email = "$dockerHubEmail"
	}
}

task deploy {
	def dockerImageTag = version
	def findDockerComposePath = new File(rootDir, 'docker-compose.yaml')

	def dockerComposeFile = file(findDockerComposePath)
	def dockerComposeContent = dockerComposeFile.text

	def updatedDockerComposeContent = dockerComposeContent
			.replaceAll(/${project.name}:\n\s+image: \S+/, "${project.name}:\n    " +
					"image: ${dockerHubUsername}/${project.name}:${dockerImageTag}")

	dockerComposeFile.write(updatedDockerComposeContent)

	println "Docker image tag '${dockerImageTag}' changed."
}

task runDockerCompose(type: Exec, dependsOn: dockerPush) {
	commandLine 'docker-compose', 'up', '-d'
}

tasks.named('test') {
	useJUnitPlatform()
}
